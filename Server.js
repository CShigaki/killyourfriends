var Player = require('./Player.js');

function Server (id, name, slots, ownerName, playersOnline) {
  // serverID: an incremental id generated by the server.
  // name: the name of the server defined by the client.
  // slots: the maximum amount of people that can join the room.
  // playersOnline: the list of people in the room. the objects stored in this array can be used to emit events.
  this.ownerName = ownerName;
  this.id = id;
  this.name = name;
  this.slots = slots;
  this.playersOnline = playersOnline;
};

// Do the calculations inside the class (may need to implement independent functions for max slots and available slots in the future).
Server.prototype.freeSlots = function() {
  // Since length does not work with keyed arrays.
  var index = 0;
  for (var player in this.playersOnline) {
    index++;
  }
  return (this.slots - index);
};

Server.prototype.removePlayer = function(id) {
  var playerListArrayNew = new Array();
  for (var playerId in this.playersOnline) {
    if (playerId != id) {
      playerListArrayNew[playerId] = this.playersOnline[playerId];
    }
  }
  this.playersOnline = playerListArrayNew;
}

Server.prototype.addPlayer = function(id, name, socket) {
  this.playersOnline[id] = new Player(id, name, socket);
};

// Used to get a specific player (may need rework later).
Server.prototype.getPlayer = function(id) {
  return this.playersOnline[id];
};

// Gets the server owner.
Server.prototype.getOwner = function() {
  return this.ownerName;
};

// Use this if you're going to use it server side.
Server.prototype.retrievePlayers = function() {
  return this.playersOnline;
};

// Use this if you want to check if all players are ready
Server.prototype.canStartGame = function() {
  for (var id in this.playersOnline) {
    if (!this.playersOnline[id].getReadyState()) {
      return false;
    }
  }

  return true;
}

// Use this if you're going to send to the client.
Server.prototype.retrievePlayersWithoutId = function() {
  var playersArray = new Array();
  for (var id in this.playersOnline) {
    playersArray.push({
      name: this.playersOnline[id].getName(),
      readyState: this.playersOnline[id].getReadyState(),
    });
  }

  return playersArray;
};

module.exports = Server;
